What is Downcasting?
Downcasting is casting to a subtype, downward to the inheritance tree. Let’s see an example:

Animal anim = new Cat();
Cat cat = (Cat) anim;

Here, we cast the Animal type to the Cat type. As Cat is subclass of Animal, this casting is called downcasting.Unlike upcasting, downcasting can fail if the actual object type is not the target object type. For example:

Animal anim = new Cat();
Dog dog = (Dog) anim;
 
This will throw a ClassCastException because the actual object type is Cat. And a Cat is not a Dog so we cannot cast it to a Dog.The Java language provides the instanceof keyword to check type of an object before casting. For example:

if (anim instanceof Cat) {
    Cat cat = (Cat) anim;
    cat.meow();
} else if (anim instanceof Dog) {
    Dog dog = (Dog) anim;
    dog.bark();
}
So if you are not sure about the original object type, use the instanceof operator to check the type before casting. This eliminates the risk of a ClassCastException thrown.
 
Why is Downcasting?
Downcasting is used more frequently than upcasting. Use downcasting when we want to access specific behaviors of a subtype.Consider the following example:

public class AnimalTrainer {
    public void teach(Animal anim) {
        // do animal-things
        anim.move();
        anim.eat();
 
        // if there's a dog, tell it barks
        if (anim instanceof Dog) {
            Dog dog = (Dog) anim;
            dog.bark();
        }
    }
}
Here, in the teach() method, we check if there is an instance of a Dog object passed in, downcast it to the Dog type and invoke its specific method, bark().
Okay, so far you have got the nuts and bolts of upcasting and downcasting in Java. Remember:
Casting does not change the actual object type. Only the reference type gets changed.
Upcasting is always safe and never fails.Downcasting can risk throwing a ClassCastException, so the instanceof operator is used to check type before casting.