Map Collection

1. Overview of Map Collection

#A Map is an object that maps keys to values, or is a collection of attribute-value pairs. It models the function abstraction in
mathematics. 
#Note that a Map is not considered to be a true collection, as the Map interface does not extend the Collection interface.
#Instead, it starts an independent branch in the Java Collections Framework.

Characteristics of a Map:

#Because a Map is not a true collection, its characteristics and behaviors are different than the other collections like List or Set.
#A Map cannot contain duplicate keys and each key can map to at most one value. Some implementations allow null key and
null value (HashMap and LinkedHashMap) but some does not (TreeMap).
#The order of a map depends on specific implementations, e.g TreeMap and LinkedHashMap have predictable order, while
HashMap does not.

Why and When Use Maps:
#Maps are perfectly for key-value association mapping such as dictionaries. Use Maps when you want to retrieve and update
elements by keys, or perform lookups by keys. Some examples:
#A map of error codes and their descriptions.
#A map of zip codes and cities.
#A map of managers and employees. Each manager (key) is associated with a list of employees (value) he manages.
#A map of classes and students. Each class (key) is associated with a list of students (value).

2. Implementations of Map

In the inheritance tree of the Map interface, there are several implementations but only 3 major, common, and general purpose
implementations - they are HashMap and LinkedHashMap and TreeMap. Let’s see the characteristics and behaviors of each implementation:

HashMap: this implementation uses a hash table as the underlying data structure. It implements all of the Map operations
and allows null values and one null key. This class is roughly equivalent to Hashtable - a legacy data structure before
Java Collections Framework, but it is not synchronized and permits nulls. HashMap does not guarantee the order of its
key-value elements. Therefore, consider to use a HashMap when order does not matter and nulls are acceptable.

LinkedHashMap: this implementation uses a hash table and a linked list as the underlying data structures, thus the order
of a LinkedHashMap is predictable, with insertion-order as the default order. This implementation also allows nulls like
HashMap. So consider using a LinkedHashMap when you want a Map with its key-value pairs are sorted by their
insertion order.

TreeMap: this implementation uses a red-black tree as the underlying data structure. A TreeMap is sorted according to
the natural ordering of its keys, or by a Comparator provided at creation time. This implementation does not allow nulls.
So consider using a TreeMap when you want a Map sorts its key-value pairs by the natural order of the keys (e.g.
alphabetic order or numeric order), or by a custom order you specify.

3. Creating a new Map

Creating a HashMap:
	Always use interface type (Map), generics and diamond operator to declare a new map. The following code creates a
HashMap:

Map<Integer, String> mapHttpErrors = new HashMap<>();
mapHttpErrors.put(200, "OK");
mapHttpErrors.put(303, "See Other");
mapHttpErrors.put(404, "Not Found");
mapHttpErrors.put(500, "Internal Server Error");
System.out.println(mapHttpErrors);

This maps HTTP status codes to their descriptions. Output:
As you can see in the output, a HashMap does not impose any order on its key-value elements.
You can create a new Map that copies elements from an existing map. For example:
The map mapErrors is created with initial elements copied from the map mapHttpErrors.

Creating a LinkedHashMap:

Map<String, String> mapContacts = new LinkedHashMap<>();
mapContacts.put("0169238175", "Tom");
mapContacts.put("0904891321", "Peter");
mapContacts.put("0945678912", "Mary");
mapContacts.put("0981127421", "John");
System.out.println(mapContacts);

The following code creates a LinkedHashMap that maps phone numbers with contact names:
Output:
As you can see, the LinkedHashMap maintains its elements by their insertion order.

Creating a TreeMap:

Map<String, String> mapLang = new TreeMap<>();
mapLang.put(".c", "C");
mapLang.put(".java", "Java");
mapLang.put(".pl", "Perl");
mapLang.put(".cs", "C#");
mapLang.put(".php", "PHP");
mapLang.put(".cpp", "C++");
mapLang.put(".xml", "XML");
System.out.println(mapLang);

4. Performing Basic Operations on a Map

The basic operations of a Map are association (put), lookup (get), checking (containsKey and containsValue),
modification (remove and replace) and cardinality (size and isEmpty).
Associating a value with a key:
The put(K, V) method associates the specified value V with the specified key K. If the map already contains a mapping for
the key, the old value is replaced by the specified value:
Getting a value associated with a specified key:
The get(Object key) method returns the value associated with the specified key, or returns null if the map contains no
mapping for the key. 

5. Iterating Over a Map (using Collection views)

As a Map is not a true collection, there is no direct method for iterating over a map. Instead, we can iterate over a map using
its collection views. Any Map’s implementation has to provide the following three Collection view methods:
	keySet(): returns a Set view of the keys contained in the map. Hence we can iterate over the keys of the map 

Map<String, String> mapCountryCodes = new HashMap<>();
mapCountryCodes.put("1", "USA");
mapCountryCodes.put("44", "United Kingdom");
mapCountryCodes.put("33", "France");
mapCountryCodes.put("81", "Japan");
Set<String> setCodes = mapCountryCodes.keySet();
Iterator<String> iterator = setCodes.iterator();
while (iterator.hasNext()) {
String code = iterator.next();
String country = mapCountryCodes.get(code);
System.out.println(code + " => " + country);
}



	values(): returns a collection of values contained in the map. Thus we can iterate over values of the map

Collection<String> countries = mapCountryCodes.values();
for (String country : countries) {
System.out.println(country);
}

	entrySet(): returns a Set view of the mappings contained in this map. Therefore we can iterate over mappings in the map

Set<Map.Entry<String, String>> entries = mapCountryCodes.entrySet();
for (Map.Entry<String, String> entry : entries) {
String code = entry.getKey();
String country = entry.getValue();
System.out.println(code + " => " + country);
}

6. Performing Bulk Operations with Maps

There are two bulk operations with maps: clear() and putAll().
The clear() method removes all mappings from the map. The map will be empty after this method returns. 
The putAll(Map<K, V> m) method copies all of the mappings from the specified map to this map.