1.Transaction in JDBC:

1.1.It designed to preserve data integrity by grouping multiple statements to be executed as a single unit. 
1.2.In a transaction, either all of the statements are executed, or none of the statements is executed. 
1.3.If any statement failed to execute, the whole transaction is aborted and the database is rolled back to the previous state. 

2.Typical Transactions Handling Workflow in JDBC

try 
{ 
    // begin the transaction:
    connection.setAutoCommit(false);
   // commit the transaction
    connection.commit(); 
} 
catch (SQLException ex) 
{
    // abort the transaction
    connection.rollback();
}
finally
{
// close statements
connection.setAutoCommit(true);
}


3. Using Save Points in a Transaction

JDBC API provides the Connection.setSavepoint() method that marks a point to which the transaction can be rolled back. The rollback() method is overloaded to takes a save point as its argument:

	connection.rollback(savepoint)

This allows us to undo only changes after the save point in case something wrong happen. The changes before the save point are still committed.

	// statements #1 & #2 are executed successfully till this point:
	Savepoint savepoint = connection.setSavepoint();
 	// execute statement #3
	// execute statement #4
 	if (/* something wrong */) {
        	// roll back the transaction to the savepoint:
        	connection.rollback(savepoint);

Note : 

1.JDBC API provides the Connection.releaseSavepoint(savepoint) method that removes the specified save point from the current transaction. A save point has been released become invalid and cannot be rolled back to. Any attempt to roll back the transaction to a released save point causes a SQLException.
2.A save point is automatically released and becomes invalid when the transaction is committed or when the entire transaction is rolled back.